#! /usr/bin/env python3

# github.com/parinchipunya/swaysms
# 20 July 2025

import fcntl
import os
import sys
import atexit
import tkinter as tk
import subprocess
import json
import threading
import time
import re
import webbrowser

lock_file_path = '/tmp/swaySMS.lock'
lock_file = None
def release_lock():
    global lock_file
    if lock_file:
        fcntl.flock(lock_file, fcntl.LOCK_UN)
        lock_file.close()
        os.remove(lock_file_path)

try:
    lock_file = open(lock_file_path, 'w')
    fcntl.flock(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
except IOError:
    print("Another instance is already running.")
    sys.exit(1)

atexit.register(release_lock)

### START ###
LAPTOP_SCREEN = "eDP-1"

def get_external_monitor():
    try:
        result = subprocess.run(
            ['swaymsg', '-t', 'get_outputs'],
            stdout=subprocess.PIPE,
            check=True,
            text=True
        )
        outputs = json.loads(result.stdout)
        for output in outputs:
            name = output.get("name", "")
            active = output.get("active", False)
            if active and not re.match(r"eDP", name):
                return name
        return None
    except Exception as e:
        print(f"Error detecting external monitor: {e}")
        return None
EXTERNAL_SCREEN = get_external_monitor()

def swaymsg(*args):
    subprocess.run(["swaymsg"] + list(args))

def set_status(msg):
    status_var.set(msg)

def get_outputs():
    result = subprocess.run(["swaymsg", "-t", "get_outputs"], capture_output=True, text=True, check=True)
    return json.loads(result.stdout)

def get_max_mode(output):
    """Return (width, height) of the highest resolution mode for a given output dict."""
    modes = output.get("modes", [])
    if not modes:
        return None
    return max(((m["width"], m["height"]) for m in modes), key=lambda x: x[0]*x[1])

def get_output_info(name):
    outputs = get_outputs()
    for out in outputs:
        if out["name"] == name and out["modes"]:
            return out
    return None

def move_workspaces_to_output(workspaces, output):
    for ws in workspaces:
        swaymsg("workspace", str(ws))
        swaymsg("move", "workspace", "to", "output", output)

def open_project_page(event):
    webbrowser.open_new("https://github.com/parinchaipunya")


def extend_screen():
    EXTERNAL_SCREEN = get_external_monitor()
    laptop_info = get_output_info(LAPTOP_SCREEN)
    ext_info = get_output_info(EXTERNAL_SCREEN)
    if not laptop_info or not ext_info:
        set_status("Could not detect both screens.")
        return

    lw, lh = get_max_mode(laptop_info)
    ew, eh = get_max_mode(ext_info)

    swaymsg(f"output {LAPTOP_SCREEN} enable mode {lw}x{lh} position 0 0")
    swaymsg(f"output {EXTERNAL_SCREEN} enable mode {ew}x{eh} position {lw} 0")
    move_workspaces_to_output([1,2,3,4,8,9], LAPTOP_SCREEN)
    move_workspaces_to_output([5,6,7], EXTERNAL_SCREEN)
    set_status("Extension Mode Enabled.")

def mirror_screen():
    EXTERNAL_SCREEN = get_external_monitor()
    laptop_info = get_output_info(LAPTOP_SCREEN)
    ext_info = get_output_info(EXTERNAL_SCREEN)

    if not laptop_info or not ext_info:
        set_status("Could not detect both screens.")
        return

    # Get all (width, height) resolutions for both screens
    laptop_modes = {(m["width"], m["height"]) for m in laptop_info["modes"]}
    ext_modes = {(m["width"], m["height"]) for m in ext_info["modes"]}

    # Find intersection of available modes
    common_modes = laptop_modes & ext_modes
    if not common_modes:
        set_status("No common resolution found to mirror.")
        return

    # Pick the highest common resolution
    mw, mh = max(common_modes, key=lambda x: x[0] * x[1])

    move_workspaces_to_output([1,2,3,4,5,6,7,8,9,10], LAPTOP_SCREEN)
    swaymsg(f"swaymsg workspace 10")
    swaymsg(f"output {LAPTOP_SCREEN} enable mode {mw}x{mh} position 0 0")
    swaymsg(f"output {EXTERNAL_SCREEN} enable mode {mw}x{mh} position 0 0")
    set_status("Mirror Mode Enabled.")

def disable_laptop_screen():
    EXTERNAL_SCREEN = get_external_monitor()
    ext_info = get_output_info(EXTERNAL_SCREEN)
    ew, eh = get_max_mode(ext_info)
    swaymsg(f'output {LAPTOP_SCREEN} disable')
    swaymsg(f'output {EXTERNAL_SCREEN} enable mode {ew}x{eh} position 0 0')
    set_status("Clamshell Mode Enabled.")


# GUI setup
root = tk.Tk()
root.title("Sway Screen Mode Selector")

main_frame = tk.Frame(root)
main_frame.pack(padx=20, pady=20) 

tk.Label(main_frame, text="Sway Screen Mode Selector", font=("JetBrainsMono Nerd Font Propo", 14, "bold"), fg="black").pack()

tk.Button(main_frame, text="Extension Mode", command=extend_screen, width=25).pack(pady=(40, 5))
tk.Button(main_frame, text="Mirror Mode", command=mirror_screen, width=25).pack(pady=5)
tk.Button(main_frame, text="Clamshell Mode", command=disable_laptop_screen, width=25).pack(pady=5)

status_var = tk.StringVar()
status_label = tk.Label(main_frame, textvariable=status_var, font=("Courier", 10), fg="black")
status_label.pack(pady=(10, 5))

tk.Button(main_frame, text="Quit", command=root.quit, width=25).pack(pady=(40, 5))

# tk.Label(main_frame, text="github.com/parinchaipunya", font=("Courier", 8), fg="gray").pack()
label = tk.Label(main_frame, text="project page", font=("Courier", 7), fg="blue", cursor="hand2")
label.pack()
label.bind("<Button-1>", open_project_page)

root.mainloop()

